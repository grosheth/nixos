{ config, lib, pkgs, ... }:

with lib;

let

  cfg = config.programs.nitch;

  eitherStrBoolInt = with types; either str (either bool int);

  optionalPackage = opt:
    optional (opt != null && opt.package != null) opt.package;

  tonitchConfig = generators.toKeyValue {
    mkKeyValue = key: value:
      let
        value' =
          (if isBool value then lib.hm.booleans.yesNo else toString) value;
      in "${key} ${value'}";
  };

in {
  options.programs.nitch = {
    extraConfig = mkOption {
      default = "";
      type = types.lines;
      description = "Additional configuration to add.";
    };
   };

  config = mkIf cfg.enable {
    home.packages = [ cfg.package ] ++ optionalPackage cfg.font;

    xdg.configFile."nitch/nitch.conf" = {
      text = ''
        # Generated by Home Manager.
      '' + concatStringsSep "\n" ([
        cfg.extraConfig
      ]);
    }
  };
}
